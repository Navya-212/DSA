# Problem Statement: You are given a positive integer n. Your task is to find and return its square root. If ‘n’ is not a perfect square, then return the floor value of 'sqrt(n)'.

# Note: The question explicitly states that if the given number, n, is not a perfect square, our objective is to find the maximum number, x, such that x squared is less than or equal to n (x*x <= n). In other words, we need to determine the floor value of the square root of n.
# Example 1:
# Input Format:
#  n = 36
# Result:
#  6
# Explanation:
#  6 is the square root of 36.

# Example 2:
# Input Format:
#  n = 28
# Result:
#  5
# Explanation:
#  Square root of 28 is approximately 5.292. So, the floor value will be 5.
 
def sqrt(n):
    low,high= 1,n
    res=-1
    while(low<= high):
        mid= (low+high)//2 
        if(mid*mid <= n):
            low= mid+1  #searching for a value greater than mid in right half 
        else:
            high= mid-1 
        print(res)
    return high
    # the high pointer will also point to the same number i.e. our answer. So, we can return either of the ‘ans’ or ‘high’.
    # O(logN, 1)

n= int(input())
print(sqrt(n))
