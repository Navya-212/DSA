#code
'''
Given an array of intervals, merge all the overlapping intervals and return an array of non-overlapping intervals.
Input: 
n=5
intervals=[[1,3][2,7][5,6][8,9][9,11]]

Output: [[1,7],[8,11]]
'''
def bruteForce(a,n):
    res=[]
    #sorting the intervals
    a.sort()
    for i in range(n):
        start,end=a[i][0], a[i][1]
        #skipping the already merged intervals
        if(res and res[-1][1]>=end): #in case of [2,7] and [5,6] st=2, end=7. end>=a[i][1] which is 6 so skipping the [5,6] as the interval is already added
            continue 
        for j in range(i+1,n):
            if(a[j][0]<=end):
                end=max(end,a[j][1])
        res.append([start,end])
    return res
    #O(N*logN+ 2*N), O(N)
    '''
    Tc: Sorting the given array takes  O(N*logN) time complexity. Now, after that, we are using 2 loops i and j. But while using loop i, we skip all the intervals that are merged with loop j. So, we can conclude that every interval is roughly visited twice(roughly, once for checking or skipping and once for merging). So, the time complexity will be 2*N instead of N2.
    Space Complexity: O(N), as we are using an answer list to store the merged intervals. Except for the answer array, we are not using any extra space.
    '''
def optimalApproach(a,n):
    res=[]
    a.sort()
    for i in range(n):
        if(not res or a[i][0]>res[-1][1]):
            res.append([a[i][0], a[i][1] ])
        else:
            res[-1][1]=max(res[-1][1] , a[i][1])
    return res
    #O(N*logN +N), O(not)
'''
Explanation:
First, we will group the closer intervals by sorting the given array of intervals(if it is not already sorted).
while traversing we will face two different cases:
Case 1: If the current interval can be merged with the last inserted interval of the answer list:
In this case, we will update the end of the last inserted interval with the maximum(current interval’s end, last inserted interval’s end) and continue moving afterward. 
Case 2: If the current interval cannot be merged with the last inserted interval of the answer list:
In this case, we will insert the current interval in the answer array as it is. And after this insertion, the last inserted interval of the answer list will obviously be updated to the current interval.
'''

a=[]
num_of_intervals= int(input())
for i in range(num_of_intervals):
    temp=list(map(int, input().split()))
    a.append(temp)
print(a)
print(bruteForce(a,len(a)))
print(optimalApproach(a,len(a)))
