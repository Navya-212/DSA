#code
'''
brute force:
Sort the array in ascending order
The element present at the second index is the second smallest element
The element present at the second index from the end is the second largest element
O(nlogn), O(1)

better approach:
Find the smallest and largest element in the array in a single traversal
After this, we once again traverse the array and find an element that is just greater than the smallest element we just found.
Similarly, we would find the largest element which is just smaller than the largest element we just found
Indeed, this is our second smallest and second largest element.
0(n), 0(1)

'''
import sys

def second_smallest_ele(a,n):
    small=float('inf')  # float('inf') = INT_MAX
    second_small=float('inf')
    if(n<2):
        return -1
    for i in range(n):
        if(a[i]<small):
            second_small=small
            small=a[i]
        elif(a[i]< second_small and a[i]!=small):
            second_small=a[i]
    return second_small

def second_largest_ele(a,n):
    large= float('-inf') #INT_MIN
    second_large= float('-inf')
    if(n<2):
        return -1
    for i in range(n):
        if(a[i]> large):
            second_large=large
            large=a[i]
        elif(a[i]>second_large and a[i]!=large):
            second_large=a[i]
    return second_large
        

n= int(input())
a=[]
for i in range(n):
    temp=int(input())
    a.append(temp)
    
print(second_smallest_ele(a,n), second_largest_ele(a,n))

# O(n), O(1)
            
        
