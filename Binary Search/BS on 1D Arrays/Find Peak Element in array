'''
Problem Statement: Given an array of length N. Peak element is defined as the element greater than both of its neighbors. Formally, if ‘arr[i]’ is the peak element, ‘arr[i – 1]’ < ‘arr[i]’ and ‘arr[i + 1]’ < ‘arr[i]’. Find the index(0-based) of a peak element in the array. If there are multiple peak numbers, return the index of any peak number.
Input Format: arr[] = {1,2,3,4,5,6,7,8,5,1}
Result: 7
'''
import sys
def linear(a,n):
    for i in range(n):
        if( (i==0 or a[i-1]<a[i]) and (i==n-1 or a[i]>a[i+1])):
            return i 
    return -1 
    #O(N),O(1)
def bsearch(a,n):
    low,high=1,n-2 
    #edge cases
    if(n==0):
        return 0
    if(a[0]>a[1]):
        return 0 
    if(a[n-1]>a[n-2]):
        return n-1
    while(low<=high):
        mid=(low+high)//2 
        if(a[mid-1]<a[mid] and a[mid]>a[mid+1]):
            return mid 
        if(a[mid]>a[mid-1]): #moving to right half 
            low=mid+1 
        else:
            high=mid-1 
    return -1
    #O(logN),O(1)


a=list(map(int,input().split()))
print(linear(a,len(a)))
print(bsearch(a,len(a)))


