#code
'''
problem statement: Given a square matrix, your task is to rotate the matrix 90 degrees clockwise.
    Input: [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]

    Output:[[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]
'''
def rotate1(a):
    n=len(a)
    res=[[0 for _ in range(n)] for _ in range(n)]
    for i in range(n):
        for j in range(n):
            res[j][n-i-1]=a[i][j]
    return res
    #O(N*N),O(N*N)//both for space nd time 
    
    
def rotate2(a):
    n=len(a)
    #transpose matrix
    for i in range(n):
        for j in range(i):
            a[i][j],a[j][i]=a[j][i], a[i][j] #swapping 
    for i in range(n):
        a[i].reverse()
    return a
    #O(N*N)+O(N*N),O(1) //one is transpose other is for reverse
    
    '''
Explanation of rotate1:
Take another dummy matrix of n*n, and then take the first row of the matrix 
and put it in the last column of the dummy matrix, 
take the second row of the matrix, and put it in the second last column of the matrix and so.

Explanation of rotate2:
By observation, we see that the first column of the original matrix is the reverse of the first row of the rotated matrix, so thatâ€™s why we transpose the matrix and then reverse each row, and since we are making changes in the matrix itself space complexity gets reduced to O(1).

Approach:
Step 1: Transpose the matrix. (transposing means changing columns to rows and rows to columns)
Step 2: Reverse each row of the matrix.

'''
r,c = map(int, input().split())
mat=[]
for i in range(r):
    a=[]
    for j in range(c):
        a.append(int(input()))
    mat.append(a)
    
for i in range(r):
    for j in range(c):
        print(mat[i][j],end=" ")
    print()
    
print(rotate1(mat))
print(rotate2(mat))
