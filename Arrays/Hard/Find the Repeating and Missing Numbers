#code
'''
Problem Statement: You are given a read-only array of N integers with values also in the range [1, N] both inclusive. Each integer appears exactly once except A which appears twice and B which is missing. The task is to find the repeating and missing numbers A and B where A repeats twice and B is missing.
Input Format: array[] = {3,1,2,5,4,6,7,5}
Result: {5,8)
Explanation: A = 5 , B = 8 
Since 5 is appearing twice and 8 is missing

https://takeuforward.org/data-structure/find-the-repeating-and-missing-numbers/

'''
def hashApproach(a,n):
    hm={}
    first,second=-1,-1
    for i in range(n):
        hm[a[i]]=hm.get(a[i],0)+1 
    for i in range(n):
        if(hm.get(i+1)==2):
            first=i+1 
        elif((i+1) not in hm):
            second=i+1 
    return [first,second]
    #O(2N),O(N)
    
def mathApproach(a,n):
    sn=(n*(n+1))//2 
    s=0 
    s2n=(n*(n+1)*(2*n+1))//6
    s2=0
    for i in range(n):
        s+=a[i]
        s2+=(a[i]*a[i])
    eq1=sn-s #==> x-y
    eq2=s2n-s2 # --> x2-y2 
    eq3=eq2//eq1 #-->x+y 
    first= (eq1+eq3)//2 #--> x-y + x+y =2x/2=x 
    second= eq3-first 
    for i in a:
        if(i==first):
            return [first,second]
        else:
            return [second, first]
    #O(N),O(1)

def XorApproach(a,n):
    xr=0 
    for i in range(n):
        xr= xr^a[i]
        xr= xr^(i+1)
    
    #finding the diff bit number 
    bit_num = (xr & ~(xr-1))
    zero,one=0,0
    for i in range(n):
        if(a[i]&bit_num !=0):
            #part of one's grp 
            one=one^a[i]
        else: 
            #part of zero's grp
            zero=zero^a[i]
    for i in range(1,n+1):
        if(i&bit_num !=0):
            one=one^i
        else:
            zero=zero^i 
    for i in a:
        if(i==zero):
            return [zero,one]
        else:
            return [one,zero]
    #O(N),O(1)    

a=list(map(int,input().split()))
print(hashApproach(a,len(a)))
print(mathApproach(a,len(a)))
print(XorApproach(a,len(a)))
#print(a)
