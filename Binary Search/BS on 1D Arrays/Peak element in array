#code
# Problem Statement: Given an array of length N. Peak element is defined as the element greater than both of its neighbors. Formally, if 'arr[i]' is the peak element, 'arr[i - 1]' < 'arr[i]' and 'arr[i + 1]' < 'arr[i]'. Find the index(0-based) of a peak element in the array. If there are multiple peak numbers, return the index of any peak number.# Input Format:
# Example 1:
# Input Format: arr[] = {1,2,3,4,5,6,7,8,5,1}
# Result: 7
# Explanation: In this example, there is only 1 peak that is at index 7.

# Example 2:
# Input Format: arr[] = {1,2,1,3,5,6,4}
# Result: 1
# Explanation: In this example, there are 2 peak numbers that are at indices 1 and 5. We can consider any of them.

def brute_Force(a):
    n= len(a)
    if(a[0]> a[1]):
        return a[0]
    if(a[n-1] > a[n-2]):
        return a[n-1]
    for i in range(1,n-1):
        if(a[i-1]<a[i] and a[i]>a[i+1]):
            return a[i]
    return -1
    #O(N,1)
   
def bsearch(a):
    n= len(a)
    if(a[0]> a[1]):
        return a[0]
    if(a[n-1] > a[n-2]):
        return a[n-1]
    low,high = 0, n-1 
    while(low<= high):
        mid = (low+high)//2 
        if(a[mid-1]<a[mid] and a[mid]>a[mid+1]):
            return a[mid]
        if(a[mid]> a[mid-1]):
            low= mid+1 
        else:
            high= mid-1 
    return -1
    #O(logN, 1)
    # Explanation: here all the elements which left to peak will be less than peak and all the elements to the right of the peak will be > than peak.
    # so whenever an element satisfis the condition a[i-1]< a[i] we're eliminating this left half of the array..similarly elimination right half of the array.
    # iterations: 1 2 3 4 5 6 7 8 5 1 
    # low= 0, 4, 7
    # high=9,7
    # mid= 4, 6
    # a[4]>a[3]--> 4>3--> low= mid+1 =4
    # a[6]> a[5] --> 7>6 --> low= mid+1 =7
    # a[8]<a[7] --> 8<5 --> high= mid-1 = 7
    # a[8] satisfies all returns a[8] as answer


a=list(map(int, input().split()))
print(brute_Force(a))
print(bsearch(a))
