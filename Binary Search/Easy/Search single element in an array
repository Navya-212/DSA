'''
Problem Statement: Given an array of N integers. Every number in the array except one appears twice. Find the single number in the array.
Input Format: arr[] = {1,1,2,2,3,3,4,5,5,6,6}
Result: 4
can try using XOR approach with O(N),O(1)
'''
import sys
def bsearch(a,n):
    low,high=1,n-2 
    #edge cases
    if(n==1):
        return a[0]
    if(a[0]!=a[1]):
        return a[0]
    if(a[n-2]!=a[n-1]):
        return a[n-1]
    while(low<=high):
        mid=(low+high)//2
        if(a[mid-1]!=a[mid] and a[mid]!=a[mid+1]):
            return a[mid] 
        if((mid%2==1 and a[mid]==a[mid-1]) or (mid%2==0 and a[mid]==a[mid+1])):
            low=mid+1 #shows that left half is sorted so moving to right half
        else:
            high=mid-1 
    return -1
    #O(logN),O(1)


a=list(map(int,input().split()))
print(bsearch(a,len(a)))


