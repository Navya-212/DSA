# Problem Statement: You are given a strictly increasing array ‘vec’ and a positive integer 'k'. Find the 'kth' positive integer missing from 'vec'.

# Input Format:
#  vec[]={4,7,9,10}, k = 4
# Result:
#  5
# Explanation:
#  The missing numbers are 1, 2, 3, 5, 6, 8, 11, 12, ……, and so on. Since 'k' is 4, the fourth missing element is 5.
 
#  https://takeuforward.org/arrays/kth-missing-positive-number/
 
 
def brute_Force(a,k):
    n=len(a)
    for i in range(n):
        if(a[i]<=k):
            k+=1 
            # increasing k value for every number found in array till we get missing no.
    return k
    #O(N, 1)
    
def bsearch(a,k):
    n=len(a)
    low, high= 0, n-1 
    while(low<=high):
        mid= (low+high)//2 
        missing= a[mid]-(mid+1)
        if(missing<k):
            low= mid+1 
        else:
            high= mid-1
    return high+k+1 
    #O(logN, 1)

# Explanation:
# a=[2,3,4,7,11], k=5
# 1. find missing numbers = a[i]-(i+1)
#     2->1, 3->1, 4->1, 7->3, 11->6
# 2. find the nearest low and high elements using bsearch
#     low, high= 5,4
# 3. after high and low crosses i.e., high<low ans will be a[high]+(k-missing[high]) --> a[high]+k-a[high]+high +1 --> high+k+1 :: [missing[high= a[high]-(high+1)]

    
a=list(map(int, input().split()))
k= int(input())
print(brute_Force(a,k))
print(bsearch(a,k))
