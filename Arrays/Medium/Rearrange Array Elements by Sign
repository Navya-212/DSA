#code
'''
Problem Statement:
There’s an array ‘A’ of size ‘N’ with an equal number of positive and negative elements. Without altering the relative order of positive and negative elements, you must return an array of alternately positive and negative values.
Input:
arr[] = {1,2,-3,-1,-2,-3}, N = 6
Output:
1 -3 2 -1 3 -2
'''
def solve1(a):
    posArr, negArr= [],[]
    pc,nc=0,0
    for i in a:
        if(i>0):
            posArr.append(i)
        else:
            negArr.append(i)
    for i in range(len(a)):
        if(i%2==0):
            a[i]=posArr[pc]
            pc+=1 
        else:
            a[i]=negArr[nc]
            nc+=1
    return a
    #O(N+N),O(N)
    
def solve2(a):
    posIdx, negIdx=0,1
    for i in range(len(a)):
        if(a[i]>0):
            a[posIdx]=a[i]
            posIdx+=2
        else:
            a[negIdx]=a[i]
            negIdx+=2
    return a
    #O(N),O(1)
    
'''explanation:
-->We know that the resultant array must start from a positive element so we initialize the positive index as 0 and negative index as 1 and start traversing the array such that whenever we see the first positive element, it occupies the space at 0 and then posIndex increases by 2 (alternate places).
-->Similarly, when we encounter the first negative element, it occupies the position at index 1, and then each time we find a negative number, we put it on the negIndex and it increments by 2.
-->When both the negIndex and posIndex exceed the size of the array, we see that the whole array is now rearranged alternatively according to the sign.
'''

a=list(map(int, input().split()))
print(solve1(a))
print(solve2(a))
