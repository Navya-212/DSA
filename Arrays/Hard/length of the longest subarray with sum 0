#code
'''
Problem Statement: Given an array containing both positive and negative integers, we have to find the length of the longest subarray with the sum of all elements equal to zero.
Input Format: N = 8, array[] = {6, -2, 2, -8, 1, 7, 4, -10}
Result: 8
Subarrays with sum 0 : {-2, 2}, {-8, 1, 7}, {-2, 2, -8, 1, 7}, {6, -2, 2, -8, 1, 7, 4, -10}
Length of longest subarray = 8

https://takeuforward.org/data-structure/length-of-the-longest-subarray-with-zero-sum/

'''
def bruteForce(a,n):
    maxi=0 
    for i in range(n):
        sum=0
        for j in range(i,n):
            sum+=a[j]
            if(sum==0):
                maxi=max(maxi, j-i+1)
    return maxi
    #O(N2),O(1)

'''
Optimal approach
if the sum of subarrary[0:7]= k and sum of subarray[0:3]=k then sum of subarray[3:7]=k-k=0 
so, storing the prefix sum with indices in an hashmap and if the prefix sum is already there then finding the length by subtracting the index of current prefix sum with index of already existing prefix sum

'''
def optimalApproach(a,n):
    hm={}
    sum,maxi=0,0 
    for i in range(n):
        sum+=a[i]
        if(sum==0):
            maxi=i+1 
        else:
            if(sum in hm):
                maxi=max(maxi,i-hm[sum])
            else:
                hm[sum]=i 
    return maxi
    #O(N),O(N)
            
    
a=list(map(int, input().split()))
print(bruteForce(a,len(a)))
print(optimalApproach(a,len(a)))
