'''
Problem Statement: You are given an array of ‘N’ integers. You need to find the length of the longest sequence which contains the consecutive elements.
Input: [100, 200, 1, 3, 2, 4]
Output: 4
https://takeuforward.org/data-structure/longest-consecutive-sequence-in-an-array/
'''
def solve1(a):
    if(len(a)==0):
        return 0
    a.sort()
    lastSmall= float('-inf')
    c,maxi=0,1
    for i in range(len(a)):
        if(a[i]-1 == lastSmall):
            c+=1 
            lastSmall=a[i]
        elif(a[i]!=lastSmall):
            c=1 
            lastSmall=a[i]
        if(c>maxi):
            maxi=c 
    return maxi
    #O(NlogN +N), O(1) -->NlogN for sorting
    
def SolveWithSet(a):
    n=len(a)
    if(n==0):
        return 0
    st=set()
    for i in range(n):
        st.add(a[i])
    c,maxi=0,1
    for it in st:
        if(it-1 not in st):
            c=1 
            x=it 
            while(x+1 in st):
                c+=1 
                x+=1 
            if(c>maxi):
                maxi=c 
    return maxi
    '''
    O(N) + O(2*N) ~ O(3*N),O(N) where N = size of the array.
Reason: O(N) for putting all the elements into the set data structure. After that for every starting element, we are finding the consecutive elements. Though we are using nested loops, the set will be traversed at most twice in the worst case. So, the time complexity is O(2*N) instead of O(N2).
    '''

a=list(map(int, input().split()))
print(solve1(a))
print(SolveWithSet(a))
